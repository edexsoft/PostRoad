<?xml version="1.0" encoding="UTF-8"?>
<!-- http://www.mybatis.org/spring/zh/ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!-- 自动扫描 -->
    <!-- <context:component-scan base-package="com.aheizi" /> -->
    <!-- 引入配置文件 -->
    <bean 
    	id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:properties/jdbc-mysql.properties" />
    </bean>
    <!-- 
	 也可以不用  .properties 文件而是用以下格式。
	 如果两者共存以下格式优先级更高会覆盖 .properties 文件 里的设置.
	
	SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, props);
	// ... or ...
	SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, environment, props);
	 如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：
		在 properties 元素体内指定的属性首先被读取。
		然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。
		最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。
    <properties resource="org/mybatis/example/config.properties">
		<property name="username" value="dev_user"/>
		<property name="password" value="F2Fa3!33TYyg"/>
	</properties>
	-->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" /> -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" /> -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        
        <!-- <property name="removeAbandoned" value="true"></property>
        <property name="removeAbandonedTimeout" value="30"></property>
        <property name="validationQuery" value="SELECT 1"></property> -->
    </bean>

    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
	    <property name="url" value="${jdbc_url}" />  
	    <property name="username" value="${jdbc_user}" />  
	    <property name="password" value="${jdbc_password}" />  
	       
	    <property name="filters" value="stat" />  
	   
	    <property name="maxActive" value="20" />  
	    <property name="initialSize" value="1" />  
	    <property name="maxWait" value="60000" />  
	    <property name="minIdle" value="1" />  
	   
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  
	   
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	       
	    <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />  
	</bean> -->

	<!-- 创建工厂 bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- <property name="mapperLocations" value="classpath:com/aheizi/mapping/*.xml"></property> -->
		<!-- <property name="mapperLocations" value="classpath*:config/mappers/**/*.xml" /> -->
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/edexsoft/framework/security/mapper/*.xml</value>
				<value>classpath*:com/edexsoft/postroad/domain/repository/*.xml</value>
			</list>
		</property>
		<!--  <property name="typeAliasesPackage" value="com.github.ichenkaihua.model"/> -->
	</bean>
	
	

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	

	<!-- 查找类路径下的映射器并自动将它们创 建 成 MapperFactoryBean -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property 
        	name="basePackage" 
        	value="
        		com.edexsoft.framework.security,
        		com.edexsoft.framework.security.implement,
        		com.edexsoft.postroad.domain.repository" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean> -->
    
    
 	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 容器管理事务 -->
	<!-- <tx:jta-transaction-manager /> -->
	
	<!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" /> 
    

</beans>